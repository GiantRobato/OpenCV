#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>

using namespace std;
using namespace cv;

void Sharpen(const Mat& myImage,Mat& Result);

int main(int argc, char** argv){

	Mat I,J,K;

	//Check if we are using grayscale or not
    if (argc >= 3 && !strcmp("G", argv[2]))
        I = imread( filename, CV_LOAD_IMAGE_GRAYSCALE);
    else
        I = imread( filename, CV_LOAD_IMAGE_COLOR);


	//Display windows
    namedWindow("Input", CV_WINDOW_AUTOSIZE);
    namedWindow("Output", CV_WINDOW_AUTOSIZE);

	//Show the input images
    imshow("Input", I);
    double t = (double)getTickCount(); //start the timer

    Sharpen(I, J); 

	//Display the cost
    t = ((double)getTickCount() - t)/getTickFrequency();
    cout << "Hand written function times passed in seconds: " << t << endl;

	//Show the result
    imshow("Output", J);
    cvWaitKey(0);

	//Create the matrix that we wish to use to alter the pixels
    Mat kern = (Mat_<char>(3,3) <<  0, -1,  0, 
                                   -1,  5, -1,
                                    0, -1,  0);

	//Start the timer
    t = (double)getTickCount();

	//Use the built-in filter
    filter2D(I, K, I.depth(), kern ); 

	//Display the cost
    t = ((double)getTickCount() - t)/getTickFrequency();
    cout << "Built-in filter2D time passed in seconds:      " << t << endl;

	//Display the result
    imshow("Output", K);

    cvWaitKey(0);
    return 0; 	


}

void Sharpen(const Mat& myImage,Mat& Result){

	//Make sure you have a valid image
    CV_Assert(myImage.depth() == CV_8U);

    const int nChannels = myImage.channels();
    Result.create(myImage.size(),myImage.type());
    
    for(int j = 1 ; j < myImage.rows-1; ++j)
    {
        const uchar* previous = myImage.ptr<uchar>(j - 1);
        const uchar* current  = myImage.ptr<uchar>(j    );
        const uchar* next     = myImage.ptr<uchar>(j + 1);

        uchar* output = Result.ptr<uchar>(j);

        for(int i= nChannels;i < nChannels*(myImage.cols-1); ++i)
        {
            *output++ = saturate_cast<uchar>(5*current[i] 
                         -current[i-nChannels] - current[i+nChannels] - previous[i] - next[i]);
        }
    }

    Result.row(0).setTo(Scalar(0));
    Result.row(Result.rows-1).setTo(Scalar(0));
    Result.col(0).setTo(Scalar(0));
    Result.col(Result.cols-1).setTo(Scalar(0));
}
